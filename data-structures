Big O notation and Time complexity

- Time complexity is a way of showing how the runtime of a function increases as a the size of the import increases
    - Linear time complexity  O(n) n = size of inputs
    - constant time complexity O(1) 
    - quadratic time complexity O(n^2) - bubble sort, selection sort, insertion sort, nested loops
    - logarithmic time complexity O(log n) - binary search 
    - exponential time complexity O(2^n) - recursive forks, backtracking, complete search 
    - n-factorial time complexity O(n!) - permutations

"we can buy memory, but you can't buy time"
- Fast runtime is better than efficient memory usage

Big O Shorthands
- Arithmetic operations are constant
- Variable assignment is constant
- Accessing elements in an array (by index) or object (by key) is constant
- In a loop, the complexity is the length of the loop times the complexity of whatever happens inside of the loop

Big O of objects
- Objects are great when you don't need any ordering. 
- O(1) Fast insertion, removal, access
- O(n) Searching
    * Objects.keys() - O(n)
    * Objects.values() - O(n)
    * Objects.entries() - O(n)
    * .hasOwnProperty(key) - O(1)

Big O of arrays
- When you need order (not always best for order)
- O(1) lookup by index
- O(1) insert by index and .push()
- O(n) searching



Algorithms and Problem Solving Patterns

What is an algorithm?
- A process or set of steps to accomplish a certain task


How do you improve algorithm problem solving?
- Devise a plan for solving problems
    + Understand the problem 
        - Can you restate the problem in your own words?
        - What are the inputs that go into the problem
        - What are the outputs that should come from the solution. What to return?
        - Can the outputs be determined from the inputs? Do you have enough information to solve the problem
        - What should i label the important pieces of data that are a part of the problem
    + Exploring concrete examples
        - Helps you determine if your code works the way it should
        - Start with simple examples and progress towards more complex
        - What about wrong or invalid inputs?
    + Break it down
        - Comments of the steps or pseudocode 
        - Communicate what you are doing. Interviewers want to see it. Might give you hints
        - Include steps about edge cases, how to handle wrong/null inputs, and what to return
    + Solve/Simplify
        - If you get stuck, simplify and solve the simpler algorithm
        - If multiple solutions are available, ask the interviewer if they like a certain method over another
    + Refactoring your code
        - Can you check the result?
        - Can you derive the result differently?
        - Can you understand it at a glance?
        - Can you use the result or method for some other problem?
        - Can you improve the performance of your solution?
        - Can you think of other ways to refactor?
        - How have other people solved this problem?
        - Ask the interviewer... What did I miss? How can I make this better?

- Master common problem solving Patterns
    + Common Patterns
        - Frequency Counter Patterns
            + Uses objects or sets to collect values/frequencies of values
            + Useful for comparing multiple pieces of data. IE. Anagrams, check if a value is contained inside another set of values.
            + should be O(n) time, better than the "easier" O(n^2)
        - Multiple Pointers
            + Creating pointers or values that correspond to an index or position and move towards the beginning, end, or middle based on a certain condition
            + Very efficient for solving problems with minimal space complexity as well
        - Sliding Window
            + This pattern involves creating a Window which can either by an array or number from one position to another 
            + Depending on a certain condition, the window either increases or closes (and a new window is created)
            + Very useful for keeping track of a subset of data in an array/string etc.
        - Divide and Conquer
            + This pattern involves dividing a data set into smaller chunks and then repeating a process with a subset of data.
            + this pattern can tremendously decrease time complexity
        - Recursion
            + Object traversal, See it with more complex data structures
            + Sometimes cleaner solution to iteration
            + Call Stack
                - "First in Last Out"
                - pop from the top/back
            + Two essential components to Recursion
                - Base case - Condition where the recursion stops
                - Recursive call with different/altered inputs
                - No basecase or not altering the inputs can cause Stack Overflow
            + Tips for recursion
                - For arrays, use methods like slice, the spread operator, and concat that make copies of arryas so you do not mutate them
                - Strings are immutable so you will need to use methods like slice, substr, or substring to make copies of Strings
                - To make copies of objects use Object.assign or the spread operator

- Searching Algorithms
    + Linear searching
        - Looping, going index to index
    + Divide and Conquer
        - Binary Searching

- Sorting Algorithms
    + Into Sorting Algos - O(n^2)
        - Bubble Sorting
            - Time complexity: Best O(n), on average O(n^2)
            - Space complexity: 0(1)
            - start at index 0, and iterate to the last index, moving the largest number to the back on the first run thru the loop
            - optimize with a boolean noSwap
        - Selection Sorting
            - Time complexity: Best O(n), on average O(n^2)
            - Space complexity: 0(1)
            - Start at index 0, and iterate to the last index looking and selecting the lowest number. place lowest number at the front.
            - optimize by only swapping when index is diff from i variable
        - Insertion Sorting
            - Time complexity: Best O(n), on average O(n^2)
            - Space complexity: 0(1)
            - Best use case: Good for sorting information coming in live (with a preexisting presorted array). Just run thru the loop once
            - Start at index 1, and compare with index 0, if lower, swap...
            - Starts sorting left side of array, and places then inserts the number in the correct position

    + Intermediate Sorting algos - O(n log n)
        - Merge Sorting
            + Time complexity: Best and average time O(nlogn)
            + Space complexity: O(n), bc creating new arrays equal to the length of the original array
            + Uses two functions
            + Divide and Conquer
        - Quick Sorting
            + Time Complexity: Best O(nlogn), Average O(nlogn), Worst O(n^2)
                - Worst case if pivot is the first element in the array AND the array is sorted
            + Space Complexity: O(log n)
            + Similar processes to Merge Sorting
            + Use a Pivot/Partition helper function
        - Radix Sorting
            + Time Complexity: Best, average, worst O(nk)
                - n length of array, k number of digits in the numbers
            + Radix sorting does not involve comparisons for sorting
            + Special sorting algorithm that works on lists of numbers
                - Never compares between two elements
                - Exploits the fact htat information about the size of a number is encoded in the number of digits
                - More Digits means a bigger number!
            + Utilizes several helper functions
                - getDigit(num, place) - returns the digit in num at the give place value
                - digitCount(num) - returns the number of digits in the num
                - mostDigits(arr) - returns the number of digits in the largest numbers in the list
                - Pseudocode 
                    + Define a function that accepts a list of numbers
                    + Figure out how many digits the largest number has
                    + Loop from k=0 up to this largest number of digits
                    + For each iteration of the loop: 
                        - Create buckets/array for each digit (0-9)
                        - place each number in the corresponding bucket based on its kth digit
                    + Replace our existing array with values in our buckets, starting with 0 and going up to 9
                    + return list at the end

- JavaScript ES2015/ES6
    + uses a constructor to create new class objects/instances
        - Example...
            + class Student {
                constructor(name, year) {
                    this.name = name;
                    this.grade = year;
                }
            }
    + Instantiate -> let John = new Student(John, junior)
        - use "new" keyword
    + Instance methods and Class methods
        - Instance methods provide functionality that applies to an instance of a class and are called thru the instance
        - Class methods use the 'static' keyword. Cannot be called thru the class instance. Name class methods with a plural 's'
        - Example...
            + class Student {
                constructor(name, year) {
                    this.name = name;
                    this.grade = year;
                    this.tardies = 0;
                    this.scores = [];
                }
                // Instance Methods begin..
                studentInfo() {
                    return `Your info is ${this.name} and you are in your ${this.grade} year of high school`
                }
                markLate() {
                    this.tardies++;
                    if (this.tardies>=3) {
                        return 'You are expelled!'
                    } 
                    return `${this.name} has been late ${this.tardies} times.`
                }
                addScore(score) {
                    this.scores.push(score);
                    return this.scores;
                }
                calculateAvg() {
                    let sum = this.scores.reduce(function(a,b){return a+b;});
                    return avg = sum/this.scores.length;
                }
                // Instance Methods ends

                // Class Methods begin
                enrollStudents() {
                    return 'Enrolling Students'
                }
            }

- Data structures
    + Singly Linked list
        - Do not have indices
        - Connected via nodes with a next pointer
        - random access is not allowed
        - Good for insertion and deletion
    + Doubly Linked list
        - Almost identical to singly linked lists, except every node has another pointer to the previous node. 
        - Better than singly linked list for finding nodes and can be done in half the time
        - However, they do take up more memory considering the extra pointer
        




- Dynamic Programming
    + bottom-up processing





Linked list
pros
- adding new items
- deleting items
cons
- retrieval
- searching

class Node:
    def __init__(self, val) // constructor in javascript
        self.val = val
        self.next = None  // pointer / null in javascript

class SLL:
    def __init__(self):
        self.head = None
    
    def addtoFront(self, val):
        temp = Node(val)
        temp.next = self.head
        self.head = temp
        return self
    
    def removeHead(self):
        if self.head is None:
            return False
        else:
            temp = self.head
            self.head = self.head.next
            # print(temp)
    
    def addtoBack(self,val):
        pointer = self.head
        if pointer is not None:  // if ( point != null ) javascript
            while pointer.next is not None: // while (point.next != null )
                pointer = pointer.next
            pointer.next = Node(val)
        else:
            self.next = Node(val)
    
    def removefromBack(self,val):
        prepointer = self.head
        pointer = self.head
        if pointer is not None and pointer.next is not None:
            while pointer.next is not None:
                prepointer = pointer
                pointer = pointer.next
            prepointer.next = None
        elif pointer == None:
            print('Error, you have no Node')
            return False
        else:
            self.head = None
    
    def insertAt(self, val, pos):
        runner = self.head
        if (self.head is None) or (pos is 1):
            return False
        if self.head is not None and self.head.next == None:
            self.head = Node(val)
        for i in range(pos - 2) :
            runner = runner.next
            new_node = Node(val)
            runner.next = new_node
            new_node.next = runner
        
    
    def removeAt(self, pos):
        runner = self.head
        if (self.head is None) or (pos is 1):
            return False
        for i in range(pos - 2) :
            if runner.next.next is None:
                runner.next = None
            else: 
                runner = runner.next
        runner.next = runner.next.next


    def retrieveAt(self, pos):
        index = pos - 1
        runner = self.head
        while runner and index: 
            runner = runner.next
            index = index - 1
        if runner:
            return runner.val 
        else: 
            return False






Arrays
continuous block of cells in memory
pros
- retrieving items
cons
- can be tough to handle large items (some languages need to allocate specific number of memory/size of array)





HashTable
object in javascript, dict or dictionary in python, hashmap in javascript
pros
- retrieving and adding
cons
- collisions 






Stack and Queue 

Stack - a list with the restriction that insertion and deletion can be performed only from one end, called the top
- "last in first out" (LIFO)
- function callstack, a stack of plates, a bottle of tennis balls, 3 towers of Hanoi
- java Arrays :add = .push() / .pop() off top 
- function callstack, recursion
call stack - depth first search 







Queue = a list or collection with the restriction that insertion can be performed at one end (tail/rear) and deletion can be performed at the other end (head/front)
- "first in first out" (FIFO)
- enqueuing - add to the tail (rear or back) / dequeueing (delete)= remove from the head (front)
- implementation can be array or linked list
- breadth first search

stacks and queue
pro 
- efficient add and remove
con
- limited use cases




Graphs and Trees - graph theory 

binary search tree - each node can have two childen
- left is less then the node, the right is higher than the node




JavaScript Data Types
SET - Set objects are collections of values. You can iterate through the elements of a set in insertion order. 
A value in the Set may only occur once; it is unique in the Set's collection.

MAP - The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value 
(both objects and primitive values) may be used as either a key or a value.

